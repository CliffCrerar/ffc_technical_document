{"version":3,"sources":["webpack:///../src/assets/img/qr1.png","webpack:///../src/pages/data-query-language.mdx","webpack:///../src/assets/img/writing-sql.jpg"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","src","require","alt","isMDXComponent"],"mappings":"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","file":"component---src-pages-data-query-language-mdx-a8b5da2df3597bc37646.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/qr1-26c9fbc1d08d700c2ec9e62c1763c13d.png\";","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/cliff/git/learn-transact-SQL-fundamentals/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Image from '../components/img';\nimport Error from '../components/error';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"data-query-language\"\n    }}>{`Data Query Language`}</h1>\n    <p><strong parentName=\"p\">{`Data query language`}</strong>{` is, a subset of structured query language used to retreive data from the database for display. `}<inlineCode parentName=\"p\">{`DQL`}</inlineCode>{` statement exclusively use the SELECT command.`}</p>\n    <Image src={require('../assets/img/writing-sql.jpg')} alt='writing sql' mdxType=\"Image\" />\n    <h2 {...{\n      \"id\": \"select-statement\"\n    }}><inlineCode parentName=\"h2\">{`SELECT`}</inlineCode>{` Statement`}</h2>\n    <p>{`Data query language is all about retrieving data from a database, it is not bothered with updating or modifying and only makes use of the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement. Although only the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement is used result sets can be extensively modified by combining the select statement with the following clauses:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`SELECT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`FROM`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`WHERE`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TOP`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ORDER BY`}</inlineCode></li>\n    </ul>\n    <p>{`The use of these clauses to modify result sets will also be demonstrated through example queries that will be run on our demo database.`}</p>\n    <p>{`Make sure that you are logged into `}<inlineCode parentName=\"p\">{`SSMS`}</inlineCode>{`, open a new query window.`}</p>\n    <p>{`Before we run our first `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement, we must tell `}<inlineCode parentName=\"p\">{`SSMS`}</inlineCode>{` that we want to use the `}<inlineCode parentName=\"p\">{`NORTHWIND`}</inlineCode>{` database, therefore we may run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE NORTHWIND;\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`USE`}</inlineCode>{` command tells `}<inlineCode parentName=\"p\">{`SSMS`}</inlineCode>{` which database it must use.`}</p>\n    <p>{`Now letâ€™s run our first `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement, in the query window type:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT * FROM Customers;\n`}</code></pre>\n    <p>{`Now execute the statement you just wrote by pressing `}<inlineCode parentName=\"p\">{`F5`}</inlineCode>{` or by clicking the execute button.`}</p>\n    <p>{`You should see the following in the bottom half of you query\nwindow:`}</p>\n    <p><img alt=\"Customer-select-result\" src={require(\"../assets/img/qr1.png\")} /></p>\n    <p>{`First select statement result\nIf you are not seeing the above result, ask yourself the following question:`}</p>\n    <p>{`Did I follow the steps in `}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started\"\n      }}>{`Getting started`}</a>{` successfully?\nDid I follow the steps in `}<a parentName=\"p\" {...{\n        \"href\": \"/creating-the-demo-database\"\n      }}>{`Creating the demo database`}</a>{`successfully?\nIs my query window looking at the Northwind database?\nFor this document, this is the first time you are doing an example by executing `}<inlineCode parentName=\"p\">{`**SQL**`}</inlineCode>{`. This example is extensive because it is also a test to see if you have setup `}<inlineCode parentName=\"p\">{`SSMS`}</inlineCode>{` correctly and if you have installed the demo database correctly. This is important because the rest of the procedures in this document assumes that this was done correctly, and if this is not completed you will unfortunately not be able to practically follow along.`}</p>\n    <p>{`The three questions you ask above is for helping you to troubleshoot the problem if you are not getting the correct results or is experiencing an error. Troubleshooting is not in the scope of this document so we encourage you to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.freecodecamp.org/news/read-search-dont-be-afraid-to-ask-743a23c411b4/\"\n      }}>{`Read, Search, Ask`}</a>{`.`}</p>\n    <p>{`The rest of the examples will only show query examples not the expected results, although in some cases the results will be explained.`}</p>\n    <h2 {...{\n      \"id\": \"from-clause\"\n    }}><inlineCode parentName=\"h2\">{`FROM`}</inlineCode>{` Clause`}</h2>\n    <p>{`The from part of the query tells the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement which table it needs to retrieve data from, and that is basically all to it. The object stipulated in the from clause will always reference a table name or any other object that resembles a table. All `}<inlineCode parentName=\"p\">{`DQL`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DDL`}</inlineCode>{` statements must use this clause in order to manipulate data stored in the database. The from clause is a mandatory clause.`}</p>\n    <h2 {...{\n      \"id\": \"where-clause\"\n    }}><inlineCode parentName=\"h2\">{`WHERE`}</inlineCode>{` Clause`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clause is not a mandatory clause but is required when a select statement must meet certain criteria. For example, if we only want to see customers from London, we would run this query:`}</p>\n    <p>{`TODO: check the select city criteria`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind;\nSELECT * FROM Customers WHERE City = 'London';\n`}</code></pre>\n    <p>{`Instead of showing all the customers you will only see the five customers that live in London.`}</p>\n    <p>{`Next run a query to display a list of customers from France.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind;\nSELECT * FROM Customers WHERE City = 'France';\n`}</code></pre>\n    <p>{`This should display eleven records of the customers that live in France.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clause filters the data according a criterion. In the above examples the `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clause only has 1 criterion, but it is possible to use more than one criterion. But this will be explained the Logical operators TODO: (fix logical operators) section of this document.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT TOP 10 * FROM customers;\n`}</code></pre>\n    <p>{`We know that placing there are eleven customers that live in France, but because we used the `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause with a parameter of 10, only ten rows are displayed. The `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause will always exclude records according to the default order of the records, unless the `}<inlineCode parentName=\"p\">{`ORDER BY`}</inlineCode>{` clause is used because it will change the order of the rows no matter what the order (the `}<inlineCode parentName=\"p\">{`ORDER BY`}</inlineCode>{` clause will be explained later in this document), rows that fall beyond the parameter of `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause will not be included in the result set.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Run the following:`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind;\nSELECT TOP 10 * FROM Customers;\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause is used limit the number of rows that a select query will return.`}</p>\n    <p>{`The query above returns only ten records even though no `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clause is included because the `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause is limiting it to ten. Even if a where clause is included the query will never return more than 10 records.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Run the following:`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind;\nSELECT TOP 10 * FROM Customers WHERE City = 'France';\n`}</code></pre>\n    <p>{`We know that placing there are eleven customers that live in France, but because we used the `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause with a parameter of 10, only ten rows are displayed. The `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause will always exclude records according to the default order of the records, unless the `}<inlineCode parentName=\"p\">{`ORDER BY`}</inlineCode>{` clause is used because it will change the order of the rows no matter what the order (the `}<inlineCode parentName=\"p\">{`ORDER BY`}</inlineCode>{` clause will be explained later in this document), rows that fall beyond the parameter of `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause will not be included in the result set.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Run the following:`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind;\nSELECT TOP 10 * FROM Customers WHERE City = 'London';\n`}</code></pre>\n    <p>{`This query still returns five rows as before even with the `}<inlineCode parentName=\"p\">{`TOP 10`}</inlineCode>{` clause. This is because as indicated before that the `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` clause limits records and this case does not have to limit the number of rows to ten as there are less than ten rows returned because there are only five customers that live in London and not more than 10. Considering this query if we for example changed the 10 to a 3 then only three rows would be in the result set.`}</p>\n    <h2 {...{\n      \"id\": \"columns\"\n    }}>{`COLUMNS`}</h2>\n    <p>{`The queries demonstrated so far, a star (`}{`*`}{`)  was always placed between the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement and the `}<inlineCode parentName=\"p\">{`FROM`}</inlineCode>{` clause, this part of a query is generally where you stipulate the columns of a table if you want your result set to only display specific columns of the table, i.e. you want to exclude some of the columns from your result set. In any query where this is not the case you must use the *, which instructs the query to display \"ALL\" columns in the table.`}</p>\n    <p>{`To demonstrate this, consider the employees table. This table contains among other things an employee's first name, last name, date of birth, address, city etc. But we want a list that displays only the first name and last name of the employees.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Run the following:`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT Firstname, Lastname FROM Employees\n`}</code></pre>\n    <p>{`The result set will only show two columns that show all the employee's first and last name.`}</p>\n    <h2 {...{\n      \"id\": \"aliasing\"\n    }}>{`ALIASING`}</h2>\n    <p><strong parentName=\"p\">{`Aliasing`}</strong>{` in the context of a relational database can have different functions depending on what type of database object the alias is applied to. `}<em parentName=\"p\">{`Aliasing`}</em>{` is used when joining tables, in this context the table names are given a different and often shortened name for simpler referencing regarding the query that is being scripted. Similarly, `}<a parentName=\"p\" {...{\n        \"href\": \"TODO:\"\n      }}>{`sub-queries`}</a>{` can be aliased when only specific dataset is required in a query, but it is not necessary to create a new table just for that purpose. But do not worry about these for now, this type of aliasing will be discussed in other sections of this document. In this section we are going to apply aliasing to columns and also demonstrate why it is useful.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`We will start by breaking some rules.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Run the following:`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT 'This is a string'\n`}</code></pre>\n    <p>{`You are probably thinking, but the `}<inlineCode parentName=\"p\">{`FROM`}</inlineCode>{` clause is mandatory, how is this not returning an error? That is because the `}<inlineCode parentName=\"p\">{`FROM`}</inlineCode>{` clause is mandatory when referring to an appropriate database object like a table, view or sub-query and 'this is a string' is not a database object. The point is not that we are breaking rules without getting errors, the point is that the column header for the single row which value was 'this is a string' read `}<em parentName=\"p\">{`(No column name)`}</em>{`. Now run it again with this modification:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT 'This is a string' AS StringColumn;\n`}</code></pre>\n    <p>{`And now the column has a name because we applied an `}<em parentName=\"p\">{`Alias`}</em>{` of \"StringColumn\". Let us move on to a more practical example of column Aliasing. For this query we want the list of employees first and last names again, but we want to make the column names more readable. `}<strong parentName=\"p\"><em parentName=\"strong\">{`Run the following:`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT firstname as First Name, lastname as Last Name FROM employees\n`}</code></pre>\n    <p>{`This will throw an error:`}</p>\n    <Error mdxType=\"Error\" />\n    <p>{` and error do not be alarmed as the above erroneous query was quite deliberate. When using an Alias that contains a space, the alias bust be placed inside BRACKETS.`}</p>\n    <blockquote>\n      <h3 parentName=\"blockquote\" {...{\n        \"id\": \"correctly-refering-to-symbols-in-code\"\n      }}><strong parentName=\"h3\">{`Correctly refering to symbols in code:`}</strong></h3>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`these [ ] are brackets not these ( )`}</inlineCode></p>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`these ( ) are parenthesis`}</inlineCode></p>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`these { } are braces`}</inlineCode></p>\n      <h3 parentName=\"blockquote\" {...{\n        \"id\": \"know-the-difference\"\n      }}><em parentName=\"h3\">{`Know the difference!`}</em></h3>\n    </blockquote>\n    <p>{`Now run the query in the correct format as below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT firstname as [First Name], lastname as [Last Name] FROM employees\n`}</code></pre>\n    <p>{`You can now see that using aliases like this is useful for making column headings more readable, as raw table attribute names are not always desirable. It is also useful when defining `}{`[`}<inlineCode parentName=\"p\">{`VIEWS`}</inlineCode>{`]`}{` that will be discussed later.`}</p>\n    <p>{`Aliasing in the context of column names is probably most useful when creating Computed Columns sometime also referred to as computed fields or derived columns which will be explained in the section Computation and Functions.`}</p>\n    <h2 {...{\n      \"id\": \"order-by-clause\"\n    }}><inlineCode parentName=\"h2\">{`ORDER BY`}</inlineCode>{` Clause`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ORDER BY`}</inlineCode>{` clause is an optional clause that when used, is almost exclusively always the final clause of a query. This clause is used to sort data in a desired format to make it more readable for display, manual analysis etc. The Â§`}<inlineCode parentName=\"p\">{`ORDER BY`}</inlineCode>{` clause can be used to order a single or a combination of columns in either ascending or descending direction or a mix of directions for multiple columns. If the order direction is not specified, the default is direction will always be ascending.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`NOTE:`}</strong>{` all the tables in the Northwind database is by design ordered by their ID columns in ascending order.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Run the following:`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT * FROM suppliers ORDER BY CompanyName\n`}</code></pre>\n    <p>{`If you analyze the results you will note that company name is alphabetically sorted in ascending order and that ID column is not because using the `}<inlineCode parentName=\"p\">{`ORDER BY`}</inlineCode>{` overrides the default order. If you for instance added the `}<inlineCode parentName=\"p\">{`ASC`}</inlineCode>{` keyword after the column name, `}<inlineCode parentName=\"p\">{`ASC`}</inlineCode>{` being the keyword for sorting in ascending order, the result set will display the same because ascending order when a query includes the ORDER BY clause.`}</p>\n    <p>{`Let's run this query again but reverse the order, which means sort in descending order, to sort in descending order you must explicitly instruct the query to do so by adding the `}<inlineCode parentName=\"p\">{`DESC`}</inlineCode>{` keyword after the column name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT * FROM suppliers ORDER BY CompanyName DESC\n`}</code></pre>\n    <p>{`The result set will now be in the opposite order than the query with no order direction keyword specified.`}</p>\n    <p>{`The next few queries will demonstrate ordering using multiple columns as well as sorting the same result set with a `}<strong parentName=\"p\">{`mix-direction-multi-column-sort`}</strong>{`.`}</p>\n    <h3 {...{\n      \"id\": \"sorting-using-more-than-one-column\"\n    }}>{`Sorting using more than one column:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`USE Northwind\nSELECT Productname, CategoryID, UnitPrice\nFROM products\nORDER BY CategoryID ASC, UnitPrice DESC\n`}</code></pre>\n    <p>{`The result set of the above displays the `}<inlineCode parentName=\"p\">{`CategoryID`}</inlineCode>{` sorted in ascending and UnitPrice sorted in descending order. The `}<inlineCode parentName=\"p\">{`ASC`}</inlineCode>{` keyword is not required after `}<inlineCode parentName=\"p\">{`CategoryID`}</inlineCode>{`, it was deliberately placed there to demonstrate how to use multiple columns in the `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`ORDER BY`}</inlineCode></strong>{` clause while as well as having the columns sorted in opposite directions.`}</p>\n    <h2 {...{\n      \"id\": \"use-command-and-semicolons-\"\n    }}><inlineCode parentName=\"h2\">{`USE`}</inlineCode>{` command and Semicolons `}{`(`}{`;`}{`)`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`USE`}</inlineCode>{` command is to select database in `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`SQL`}</inlineCode></strong>{` Server, this is a feature that is unique to MS `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`SQL`}</inlineCode></strong>{` Server only. We also used it in each of our example scripts, this was to demonstrate that it is good practice when working with MS `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`SQL`}</inlineCode></strong>{` Server to always have this at the top of your script, because it will ensure that every time that you run your script it will be run on the correct database. Now that we have made that clear, note that for the rest of the example scripts in this document this USE database script line will not be included.`}</p>\n    <p>{`You will also note that there are semi-colons at the end of each line, this is to tell the RDBMS that it is the end of the line for a specific operation. This convention is irrelevant in `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`T-SQL`}</inlineCode></strong>{` and `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`MS SQL`}</inlineCode></strong>{` Server. But is a requirement in other `}<strong parentName=\"p\">{`RDBMS`}</strong>{` like My`}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`SQL`}</inlineCode></strong>{`, `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`PostgreSQL`}</inlineCode></strong>{` and Oracle. This is because in `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`MS SQL`}</inlineCode></strong>{` server the `}<strong parentName=\"p\">{`RDBMS`}</strong>{` can detect the end of a line without the semi-colon.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/writing-sql-07b4965e29e4d11a73f71f17374b7399.jpg\";"],"sourceRoot":""}