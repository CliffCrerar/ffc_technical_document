{"version":3,"sources":["webpack:///../src/pages/data-manipulation-language.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-data-manipulation-language-mdx-78125fdc5b773c4e48a0.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/cliff/git/learn-transact-SQL-fundamentals/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"data-manipulation-language\"\n    }}>{`Data Manipulation language`}</h1>\n    <p><inlineCode parentName=\"p\">{`DML`}</inlineCode>{` is a subset of structured query language. It consists of a collection of commands or statementsq used to manipulate database objects. These commands are `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`DELETE`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`TRUNCATE`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`MERGE`}</inlineCode>{` command also forms part of data manipulation language and is covered at a later stage.`}</p>\n    <p>{`This collection of commands, like with the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement, is used along with `}<inlineCode parentName=\"p\">{`FROM`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clauses to define the objects to process. The `}<inlineCode parentName=\"p\">{`TOP`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ORDER BY`}</inlineCode>{` clauses cannot be used in data manipulation language, and this collection has some of their own unique clauses.`}</p>\n    <h2 {...{\n      \"id\": \"insert-into-command\"\n    }}><inlineCode parentName=\"h2\">{`INSERT INTO`}</inlineCode>{` Command`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` command is used to insert data into any table object. `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` cannot be used on database `}<inlineCode parentName=\"p\">{`views`}</inlineCode>{`. `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` can be used in two forms, both of which will be demonstrated in examples for follow. The first form uses the `}<inlineCode parentName=\"p\">{`VALUES`}</inlineCode>{` clause to append data, the second form makes use of the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement to stipulate values to append.`}</p>\n    <h3 {...{\n      \"id\": \"insert-into-with-values-clause\"\n    }}><inlineCode parentName=\"h3\">{`INSERT INTO`}</inlineCode>{` with `}<inlineCode parentName=\"h3\">{`VALUES`}</inlineCode>{` Clause`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`VALUES`}</inlineCode>{` clause is used to `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` data usually for newly created transactions. We are going to insert a new line into the Categories table. The syntax is as follows (remember to have `}<inlineCode parentName=\"p\">{`USE Nortwind`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO Categories VALUES(9, 'Tinned Foods', 'These are all types of food that are preserved in a can');\n`}</code></pre>\n    <p>{`If you run a `}<inlineCode parentName=\"p\">{`SELECT * FROM Categories`}</inlineCode>{`, you will notice that the new line has been added. So how does it work? Notice that the table has three columns`}</p>\n    <p><inlineCode parentName=\"p\">{`CategoryID`}</inlineCode>{`,`}<inlineCode parentName=\"p\">{`CategoryName`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Description`}</inlineCode>{`. The order in which we name these columns is also the order in which they appear from left to right in the table. This is what is called `}<a parentName=\"p\" {...{\n        \"href\": \"TODO:\"\n      }}><em parentName=\"a\">{`ORDINAL POSITION`}</em></a>{`.`}</p>\n    <p>{`Note that the above `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement is how the `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` command can be run using its simplest form. But there are problems with using this form.`}</p>\n    <p>{`If we had run the above `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement and switched around 'Tinned Foods' to be after 'These are all types of food that are preserved in a can' in the values clause the data would be inserted erroneously. In many instances the table ID, in this case CategoryID, has been defined to `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3schools.com/sql/sql_autoincrement.asp\"\n      }}>{`AUTO-INCREMENT`}</a>{`. This means that when you insert a row you do not have to define the value of the key field (The reason this is important as well as how it is achieved will be explained in `}<a parentName=\"p\" {...{\n        \"href\": \"TODO:\"\n      }}>{`Data definition language section`}</a>{`. If you were to run the above `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement without the `}<inlineCode parentName=\"p\">{`9`}</inlineCode>{` you would receive and error the error Column name or number of supplied values does not match table definition. That is because your table has three columns but you are only supplying it two values and you are receiving the error because the RDBMS does not know in which columns it must insert these values into.`}</p>\n    <p>{`The way to work around this is to tell the RDBMS in which columns it must insert the values to and it is achieved as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO CATEGORIES(CategoryName,Description)\nVALUES('Tinned Foods', 'These are all types of food that are preserved in a can');\n`}</code></pre>\n    <p>{`Note that you still receive an error Cannot insert the value NULL into column. It is because as explained above, this is how you must structure your insert statements if your table ID has been configured to `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3schools.com/sql/sql_autoincrement.asp\"\n      }}>{`AUTO-INCREMENT`}</a>{` and the `}<em parentName=\"p\">{`Categories table`}</em>{` is not configured this way.`}</p>\n    <p>{`But let us say for instance we have a scenario where our `}<em parentName=\"p\">{`Description`}</em>{` must be before our `}<em parentName=\"p\">{`CategeoryID`}</em>{` when we run our `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement. This means that our `}<inlineCode parentName=\"p\">{`ORDINAL POSITION`}</inlineCode>{` of our `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement must be different from the `}<inlineCode parentName=\"p\">{`ORDINAL POSITION`}</inlineCode>{` of our table and we achieve a successful insert as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO CATEGORIES(CategoryID, Description, CategoryName)\nVALUES(10,'These beverages require a special license to trade','Alcoholic Beverages');\n`}</code></pre>\n    <p>{`Although this seems like it is supposed to work it is producing the following error, `}<inlineCode parentName=\"p\">{`String or binary data would be truncated`}</inlineCode>{`. You will notice, if you navigate to the Categories table by expanding the `}<inlineCode parentName=\"p\">{`Northwind`}</inlineCode>{` database then expanding the tables folder then expanding the table itself to reveal the columns, that the data type of the CategoryName is `}<inlineCode parentName=\"p\">{`varchar(15)`}</inlineCode>{`, if you count the number of characters in the string of the name we are attempting to insert you should get a number greater than 15. The error generated by SSMS was because the CategoryName the `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement was instructed to use has more characters than the data type allows. To fix it simply change the CategoryName to be shorter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO CATEGORIES(CategoryID, Description, CategoryName)\nVALUES(10,'These beverages require a special license to trade','Alcohol Drinks);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"insert-statements-and-data-types\"\n    }}><inlineCode parentName=\"h2\">{`INSERT`}</inlineCode>{` statements and `}<inlineCode parentName=\"h2\">{`DATA TYPES`}</inlineCode></h2>\n    <p>{`It's taken a while to get here and before we continue there an important points to highlight.`}</p>\n    <p>{`When you write and `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement the data types you are inserting does not have to match but they must at least be compatible. If we consider these 2 datatypes, `}<inlineCode parentName=\"p\">{`varchar(14)`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`varchar(20)`}</inlineCode>{` although they are both of string, they are not the same, they are compatible but only to a degree. Consider our examples above, `}<em parentName=\"p\">{`Tinned Foods`}</em>{` is a string, and if you were to determine its data type it would be `}<inlineCode parentName=\"p\">{`varchar(12)`}</inlineCode>{` or more accurately `}<inlineCode parentName=\"p\">{`char(12)`}</inlineCode>{` and if you ran that first `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` you noticed that it did not produce an error because the datatype for the column `}<inlineCode parentName=\"p\">{`varchar(15)`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`char(12)`}</inlineCode>{` are compatible datatypes. In contrast to this, the datatype for the CategoryName `}<em parentName=\"p\">{`Alcoholic Beverages`}</em>{` is `}<inlineCode parentName=\"p\">{`char(19)`}</inlineCode>{` and as was revealed varchar(15) are incompatible datatypes, hence our error, when the CategoryName was shortened to `}<em parentName=\"p\">{`Alcohol Drinks`}</em>{` it changed the data type of the `}<inlineCode parentName=\"p\">{`CategoryName`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`char(19)`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`char(14)`}</inlineCode>{` making it compatible with `}<inlineCode parentName=\"p\">{`varchar(15)`}</inlineCode>{`.`}</p>\n    <p>{`NOTE: If you navigate to this `}{`[link]`}{`(`}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-type-conversion\"\n      }}>{`https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-type-conversion`}</a>{` database-engine?view=sql-server-2017), you will find that Microsoft has created a concise matrix of data type compatibility.`}</p>\n    <h2 {...{\n      \"id\": \"insert-into-more-than-1-row-with-values-clause\"\n    }}><inlineCode parentName=\"h2\">{`INSERT INTO`}</inlineCode>{` more than 1 row with `}<inlineCode parentName=\"h2\">{`VALUES`}</inlineCode>{` clause`}</h2>\n    <p>{`The above examples inserted a records for each `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement executed (Not considering to the `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statements that generated errors). If you wanted to insert the two new entries from examples above in one execution, which means you write some script and execute once, not like the examples where we scripted then executed for each entry.`}</p>\n    <p>{`You could write the two `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statements in one query window and execute it, but you are doing two inserts. But there is a better way by which you only script one `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` statement and insert more than one row. And it can either look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO CATEGORIES\nVALUES\n(10,'Alcohol Drinks', 'These beverages require a special license to trade'),\n(9,'Tinned Foods', 'These are all types of food that are preserved in a can');\n`}</code></pre>\n    <p>{`And although the above would work fine, it is more advisable to run it like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO CATEGORIES(CategoryID, CategoryName, Description)\nVALUES\n(10,'Alcohol Drinks', 'These beverages require a special license to trade'),\n(9,'Tinned Foods', 'These are all types of food that are preserved in a can');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"insert-into-with-a-select-statement\"\n    }}><inlineCode parentName=\"h2\">{`INSERT INTO`}</inlineCode>{` with a `}<inlineCode parentName=\"h2\">{`SELECT`}</inlineCode>{` statement`}</h2>\n    <p>{`Remember in the alluded to two forms of the insert statement. The first is using the `}<inlineCode parentName=\"p\">{`VALUES`}</inlineCode>{` clause, the second is using a `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement.`}</p>\n    <h4 {...{\n      \"id\": \"when-to-use-which\"\n    }}>{`When to use which?`}</h4>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`VALUES`}</inlineCode>{` would be used when the incoming transactions are from outside the database. For example, a user capturing a supplier invoice.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`SELECT`}</inlineCode>{` would be used when the data is already in the database but must be transformed in some way. For example a table of transactions must be summarised according to a business rule, these new entries must be appended into another table which is used for report generation.`}</li>\n    </ol>\n    <p>{`To make sense of this we will consider a scenario:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Prospective customers must submit an application to buy on credit, approved customers are flagged as approved in the `}<em parentName=\"p\">{`Customer_applications`}</em>{` table.`}</p>\n    </blockquote>\n    <p>{`So we will use a INSERT SELECT statement to do this, but first run;`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT * FROM Customer_applications;\n`}</code></pre>\n    <p>{`Notice it is identical to `}<em parentName=\"p\">{`Customers`}</em>{` table, except that it has a status column at the end. If tables are identical then the query would be simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO Customers SELECT * FROM Customer_applications WHERE Status = 'approved';\n`}</code></pre>\n    <p>{`But in the real world a situation like this is very rare, and even in this case if we ran the query above it would fail. So it must be modified to fit into the Customers table. The syntax is as follows and scripted according to good practice:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO Customers(CustomerID, CompanyName, ContactName, ContactTitle, [Address], City, Region, PostalCode, Country, Phone, Fax)\nSELECT CustomerID, CompanyName, ContactName, ContactTitle, [Address], City, Region, PostalCode, Country, Phone, Fax\nFROM customer_applications\nWHERE status = 'approved';\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note that the Address is in brackets. [] this is because it is a `}<a parentName=\"p\" {...{\n          \"href\": \"TODO:\"\n        }}>{`reserved word`}</a>{`. See the section on reserved words.`}</p>\n    </blockquote>\n    <p>{`Remember that a `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement is independent, it is not a clause of the `}<inlineCode parentName=\"p\">{`INSERT`}</inlineCode>{` command like `}<inlineCode parentName=\"p\">{`VALUES`}</inlineCode>{`. Because of this when scripting `}<inlineCode parentName=\"p\">{`INSERT-SELECT`}</inlineCode>{` statement first only run the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement until you are satisfied that your `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement will run with an INSERT statement.`}</p>\n    <h2 {...{\n      \"id\": \"select-into-command\"\n    }}><inlineCode parentName=\"h2\">{`SELECT INTO`}</inlineCode>{` Command`}</h2>\n    <p>{`Another way to move data around in a database is to use the `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{` command. The example below will copy the entries from the products table where no units are on order;`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT * INTO noProductsOnOrder FROM Products WHERE UnitsOnOrder = 0;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"explanation\"\n    }}>{`Explanation:`}</h3>\n    <p>{`This command, except for the `}<inlineCode parentName=\"p\">{`INTO`}</inlineCode>{` part is identical to a `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement. How it differs from `}<inlineCode parentName=\"p\">{`INSERT INTO`}</inlineCode>{` is, I`}<inlineCode parentName=\"p\">{`NSERT INTO`}</inlineCode>{` inserts records into existing database table objects, `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{` does exactly the same, except `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{` will be used when the table object the of the records to be inserted does not exist yet. `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{` uses the SELECT part to retrieve data just like a normal `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`INTO`}</inlineCode>{` part instructs the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement to make an exact structural copy of the table where data is being selected from, then inserts the data that was selected.`}</p>\n    <p>{`In the example above, the query is selecting all the columns from the products table, creating a table with all `}<strong parentName=\"p\">{`(`}{`*`}{`)`}</strong>{` the columns from the product table then INSERTS only the entries where the UnitsOnOrder are 0.`}</p>\n    <p>{`As the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` into follows the rules of a `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` query, the `}{`*`}{` can be replaced with column names that are valid according to the FROM clause, in this cause the table created by the INTO part will only have the columns defined after the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{`. The TOP clause can be used to limit entries. If column ALIASING is applied the table CREATED by the INTO will have the Column ALIAS as column names. If ORDER BY is used the new table will assume that order in the new table.`}</p>\n    <p>{`This example we will copy the top 5 products with only the ProductName aliased as Product and the UnitsInStock ALIASED as Stock Level columns of the products where no units are currently on order:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT TOP 5 ProductName as Product, UnitsInStock as [Stock Level] INTO ProductsHighStock FROM Products WHERE UnitsOnOrder = 0;\nSELECT * FROM ProductsHighStock;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"update-command\"\n    }}><inlineCode parentName=\"h2\">{`UPDATE`}</inlineCode>{` Command`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`INSERT INTO`}</inlineCode>{` command is used to create new data in the database while the `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command is used to modify existing data. In a `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` statement the `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clause is used to target the data that is to be updated. The example below updates the region column in the suppliers table, and the SupplierID is used to target the record to be updated:`}</p>\n    <p><em parentName=\"p\">{`Once again make sure that `}<inlineCode parentName=\"em\">{`USE Northwind;`}</inlineCode>{` is at the top of your query window.`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`UPDATE Suppliers SET Region = 'Kongers' WHERE SupplierID = 21;\n`}</code></pre>\n    <p>{`From the example above you will note that the `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` statement does not have a `}<inlineCode parentName=\"p\">{`FROM`}</inlineCode>{` clause. Tthis is because the table object is specified right after the `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` keyword. The `}<inlineCode parentName=\"p\">{`SET`}</inlineCode>{` clause defines the part of the query that determines what is to be updated, in this case the Region is modified. As stated before the `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clause determines the rows to be updated.`}</p>\n    <p>{`Also in the `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clause the SupplierID is not encapsulated in quotes like in the `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` clauses of previous queries. This is because the column objects from all the previous queries were of type `}<em parentName=\"p\">{`string`}</em>{` where the SupplierID of the suppliers table is of type `}<em parentName=\"p\">{`integer`}</em>{`. However, if we were to encapsulate the SupplierID as such '21', the query would not fail because strings that are number only (no alphabetical characters, no spaces) are compatible with type `}<em parentName=\"p\">{`integer`}</em>{`.`}</p>\n    <p>{`Considering the `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` example it is important to note that if the where clause were to be omitted all rows will be updated for the `}<inlineCode parentName=\"p\">{`SET`}</inlineCode>{` criteria.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command can also be used to `}<inlineCode parentName=\"p\">{`SET`}</inlineCode>{` one column equal to another. In such a case instead of using a value on the right hand side equal sign in the `}<inlineCode parentName=\"p\">{`SET`}</inlineCode>{` clause, a column name would be used. These type of updates become useful when `}<a parentName=\"p\" {...{\n        \"href\": \"TODO:\"\n      }}>{`joining tables`}</a>{` as well as when using `}<a parentName=\"p\" {...{\n        \"href\": \"TODO:\"\n      }}>{`sub-queries`}</a>{`. This will be demonstrated in the mentioned sections.`}</p>\n    <blockquote>\n      <h3 parentName=\"blockquote\" {...{\n        \"id\": \"attention\"\n      }}>{`ATTENTION:`}</h3>\n      <p parentName=\"blockquote\">{`The update command is the most volatile command in SQL. If this command is used recklessly it could potentially compromise the integrity of very important data, and if there are no appropriate disaster recovery controls in place the damage could be catastrophic.\nIn a professional environment a corruption of data described here places your own job as well as the jobs of the custodians of the data at risk, it is important to take great care when you have database credentials with UPDATE privileges.`}</p>\n    </blockquote>\n    <p>{`WARNING: If you ever find yourself in a situation where you have access to a production database with `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` privileges and you are not the DBA, please refrain from using the `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command. if you must run the `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command always do it under supervision of the DBA. It is for your own safety.`}</p>\n    <h4 {...{\n      \"id\": \"there-is-no-such-thing-as-undo-when-scripting-sql\"\n    }}>{`There is no such thing as `}<inlineCode parentName=\"h4\">{`UNDO`}</inlineCode>{` when scripting `}<inlineCode parentName=\"h4\">{`SQL`}</inlineCode></h4>\n    <p>{`If you are administering your own personal database as a productivity tool you will most likely use the `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command often. Although the consequence of a mishap is far less. For yourself a `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command mishap could mean a loss of hours of work. It can even lead to loss of employment if severe enough.`}</p>\n    <p>{`The examples will follow a process that minimizes the risk of using the `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command, and after the examples a few measures you can take to recover your data if an `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command query goes wrong.`}</p>\n    <p>{`A good preventative measure you can take when using he `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` command is to first use a `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement to target the data you wish to update.`}</p>\n    <p>{`The example below is the a `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` statement which determines the `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{` part for the subsequent `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` statement.`}</p>\n    <p>{`Scenario: According to latest professional practice it no longer appropriate to distinguish female titles according to their marital status and all woman will be given the title of Mrs.`}</p>\n    <p>{`Run the following `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` to inspect the target data for `}<inlineCode parentName=\"p\">{`UDPATE`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT * FROM Employees WHERE TitleOfCourtesy = 'Ms.';\n`}</code></pre>\n    <p>{`Looking at the result firstly note that all the TitleOfCourtesy columns state Ms. Also that there are four rows returned by the `}<inlineCode parentName=\"p\">{`SELECT`}</inlineCode>{` query. Using the select statement we have confirmed that criteria is correct and that when we do our updated the completion message must read `}<strong parentName=\"p\">{`4 rows affected`}</strong>{`. We know that something is wrong with our update statement if any other number appears except four.`}</p>\n    <p>{`Now run the update and use the same WHERE clause as per the select example above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`UPDATE Employees SET TitleOfCourtesy = 'Mrs.' WHERE TitleOfCourtesy = 'Ms.';\n`}</code></pre>\n    <p>{`Another good preventative measure when using `}<inlineCode parentName=\"p\">{`UPDATE`}</inlineCode>{` is to either remove your query from the query window, or if you might want to use it at a latest stage place the double-dash(--) in front of it. This converts a line to a comment rendering that line invisible to the `}<inlineCode parentName=\"p\">{`RDMS`}</inlineCode>{` query engine. More on comments on the section `}<a parentName=\"p\" {...{\n        \"href\": \"TODO:\"\n      }}>{`using comments`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"update-command-disaster-recovery-measures\"\n    }}><inlineCode parentName=\"h2\">{`UPDATE`}</inlineCode>{` Command disaster Recovery measures`}</h2>\n    <p>{`Reading this, you might think that disaster is a strong word but we will consider a scenario, one recovery measures were neglected one where they were not. But first about the measures, there are two very good methods that you can use to recover data that has been corrupted by your own hand.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: These methods are for you, using RDMS as a productivity tools and can also be appropriate and effective for production database with few users and a low transaction rate. Disaster recovery on its own have dedicated technical documents and is much more complex in a corporate environment transaction counted per second, the methods described here are not appropriate for this types of situations.`}</p>\n    </blockquote>\n    <p>{`Making backups with MS SQL Server and SQL Server Express. You can use schedule backups to ensure that when disaster strikes your you are only set back a couple of hours. You are also able to make manual backups at any time. The problem with this method is that if you have large volumes of data, and you are running a SQL server on your own machine you can quickly run out of hard drive space because these types of backups backs up of all the objects in the database, when you only want to protect the table you are updating from disaster. This method of making backups will be explained in using backups.`}</p>\n    <p>{`Using the `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{` command as disaster recovery measure is a way faster method with a very low disk space overhead than backing up a whole database. This is because the `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{` makes a table copy that has a lower disk storage cost, can be made from the query window and the processing time is way faster than making a database backup and can literally give a type of undo functionality. We will demonstrate this method in a scenario in the section joining tables.`}</p>\n    <h2 {...{\n      \"id\": \"delete-and-truncate\"\n    }}><inlineCode parentName=\"h2\">{`DELETE`}</inlineCode>{` and `}<inlineCode parentName=\"h2\">{`TRUNCATE`}</inlineCode></h2>\n    <p>{`So far in this section we have covered, data creation with `}<inlineCode parentName=\"p\">{`INSERT INTO`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{`, we covered modifying data with the UPDATE command and we are concluding with how to destroy data.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`TIP: Deleting data completely is never a great idea, when you decide to remove data from your database at least archive it in an appropriately if it is cluttering up your workspace.`}</p>\n    </blockquote>\n    <p><inlineCode parentName=\"p\">{`DELETE`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`TRUNCATE`}</inlineCode>{` commands have the same purpose but different roles.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DELETE`}</inlineCode>{` command is used when the task of destroying data is related to specific records and is used in conjunction with the FROM and WHERE clause.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TRUNCATE`}</inlineCode>{` command is when you want to clear out all the rows from a table and does not uses neither `}<inlineCode parentName=\"p\">{`FROM`}</inlineCode>{` nor `}<inlineCode parentName=\"p\">{`WHERE`}</inlineCode>{`. The DELETE command has the same capability as the `}<inlineCode parentName=\"p\">{`TRUNCATE`}</inlineCode>{` command, and we will demonstrate this as well, but the executing methods of DELETE and `}<inlineCode parentName=\"p\">{`TRUNCATE`}</inlineCode>{` are very different.`}</p>\n    <p>{`Let us first use the `}<inlineCode parentName=\"p\">{`SELECT INTO`}</inlineCode>{` command to copy the tables we are going to run `}<inlineCode parentName=\"p\">{`TRUNCATE`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DELETE`}</inlineCode>{` on. We will still need the data in these tables for later so please do not neglect this step.`}</p>\n    <p>{`To backup run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`SELECT * INTO employees_bu FROM Employees;\nSELECT * INTO products_bu FROM Products;\n`}</code></pre>\n    <p>{`Deleting records. Northwind's USA branch has closed down all the employees of that branch lost their jobs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`DELETE FROM Employees WHERE Country = 'USA';\nSELECT * FROM employees;\n`}</code></pre>\n    <p>{`Next, we use the `}<inlineCode parentName=\"p\">{`TRUNCATE`}</inlineCode>{` command to simulate a disaster.`}</p>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`NORTHWIND HAS BEEN HACKED`}</em></strong>{`, the malicious attacker removed all records of the products Northwind trades with.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`TRUNCATE TABLE Products;\nSELECT * FROM Products;\n`}</code></pre>\n    <p>{`The next example demonstrates how DELETE has the same capability as TRUNCATE when the WHERE clause is omitted.`}</p>\n    <p>{`Northwind has gone bankrupt the rest of the branches closed down and Northwind no longer employs anyone.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`DELETE FROM Employees;\nSELECT * FROM Employees;\n`}</code></pre>\n    <p>{`In a drastic turn of events Northwind received a capital injection, all employees have been rehired. The Northwind DBA also has strong disaster recovery in place and is able to recover all the data lost during the hack.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sql\"\n      }}>{`INSERT INTO Employees SELECT * FROM employees_bu;\nINSERT INTO Products SELECT * FROM Products _bu;\n`}</code></pre>\n    <p>{`Now check that the data has indeed been restored by running select statements one after the other.`}</p>\n    <blockquote>\n      <h3 parentName=\"blockquote\" {...{\n        \"id\": \"note-that-no-one-really-lost-their-jobs-and-no-families-were-affected-during-the-process-of-this-exercise\"\n      }}>{`NOTE: That no one really lost their jobs and no families were affected during the process of this exercise.`}</h3>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To properly understand the difference between DELETE and TRUNCATE first requires you to grasp the concept of `}<a parentName=\"p\" {...{\n          \"href\": \"TODO:\"\n        }}>{`transaction concurrency`}</a>{` that is not in the scope of this document. You can find information in this in the additional resources section.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}