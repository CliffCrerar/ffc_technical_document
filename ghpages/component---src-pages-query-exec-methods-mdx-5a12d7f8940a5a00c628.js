(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{FYkC:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return s})),a.d(t,"default",(function(){return h}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk"),a("mXGw");var n=a("/FXl"),o=a("TjRS");a("EL7q"),a("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/pages/query-exec-methods.mdx"}});var r={_frontmatter:s},l=o.a;function h(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,["components"]);return Object(n.b)(l,i({},r,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"query-execution-methods-first-draft"},"Query Execution Methods (first draft)"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"This page is a draft")),Object(n.b)("p",null,"As described in the introduction, ",Object(n.b)("inlineCode",{parentName:"p"},"SQL")," is a ",Object(n.b)("strong",{parentName:"p"},"imperative language")," with some characteristics of a ",Object(n.b)("strong",{parentName:"p"},"procedural"),". "),Object(n.b)("p",null,"This part is mostly just for interest sake, if you are not concerned with how a database processes queries you can skip to the next section ",Object(n.b)("a",i({parentName:"p"},{href:"TODO:"}),"link")),Object(n.b)("p",null,'This is because in a file with many lines of queries the execution is from top to bottom, that is what makes it procedural. This has also been demonstrated in almost every example so far. We consider the ORDER BY example from the href="#Data_query_language">Data query language:'),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-sql"}),"USE Northwind;\nSELECT ProductName, CategoryID, UnitPrice\nFROM Products\nORDER BY CategoryID ASC, UnitPrice DESC;\n")),Object(n.b)("p",null,"It executes the queries as they are encountered when the query parser starts reading the file from line 1 until there are no more lines to execute, it will still be true no matter how many lines of queries are in a file and is only limited by the resources of the machine it is running on. That is where the similarities with a ",Object(n.b)("strong",{parentName:"p"},"procedural language")," end. "),Object(n.b)("p",null,"There are, however, as with all things exceptions. It is possible to issue and instruction for the query parser to go to a specific line in the code and this is achieved byt the ",Object(n.b)("inlineCode",{parentName:"p"},"GOTO")," command. "),Object(n.b)("h2",{id:"goto-command"},Object(n.b)("inlineCode",{parentName:"h2"},"GOTO")," Command"),Object(n.b)("p",null,"But it is only accomplished if an explicit instruction is given to the parser. This instruction is the ",Object(n.b)("a",i({parentName:"p"},{href:"https://docs.microsoft.com/en-us/sql/t-sql/language-elements/goto-transact-sql?view=sql-server-2017%22"}),"GOTO")," command and can be triggered in normal procedural execution or if a certain condition is met. We will not elaborate further on GOTO command."),Object(n.b)("p",null,"The part that makes SQL an imperative language. Meaning that SQL is only telling the parser what to do, once it knows what you want it knows how to execute the instruction you do not have to give it those instructions. "),Object(n.b)("p",null,"We will use the following analogy to make this clear:"),Object(n.b)("p",null,"If you go to the bank to query (pun intended) some anomalies you have noticed on your account. Once you get to the enquiries counter, you only have to give the clerk either your personal identification number or your bank account number. If he has that information, he will know how to find your records on the system. You as the customer do not need to tell him how to navigate his system, or which of his colleagues he might need to approach to resolve your query."),Object(n.b)("p",null,"This is one of the fundamental principles of an RDBMS. It is why they are such a powerful tool for keeping track of thousands, hundreds of thousands, millions and even billions of transactions while remaining efficient. It is also, why they are still relevant and widely used 30 years after they were invented. Just as the clerk at the enquiries counter knows what to do when you present him with your query, so does the RDBMS know everything about itself."),Object(n.b)("p",null,"It achieved this awareness by keeping a data-dictionary, sometimes also referred to database catalogue. You are even able to query this data-dictionary in SQL statements referred to as the INFORMATION-SCHEMA. All the data about the database or meta-data is constantly being kept up to date every time a query is processed."),Object(n.b)("p",null,"Now that we know what makes SQL an imperative language, we will talk about how it imperatively executes SQL. We already know that the parser runs through a file from top to bottom. But each line is critically evaluated by the parser and acts like a bouncer at the door of a night club. The strictest bouncer you have ever encountered, so strict that in a line of people trying to enter. If even one person is denied access, so are all the people waiting in line. And all the people in that were in that line already inside the club must now exit immediately as well. Because in a line of queries, if one query fails the parser evaluation, execution will cease and all previous queries that already passed the parser evaluation is rolled back. (GO command)"),Object(n.b)("p",null,"But how does the parser evaluate each query? The query example from before will be used again. Line numbers have been added and will be used as a means of explanation."),Object(n.b)("pre",null,Object(n.b)("code",i({parentName:"pre"},{className:"language-sql"}),"USE Northwind;\nSELECT ProductName, CategoryID, UnitPrice\nFROM Products\nORDER BY CategoryID ASC, UnitPrice DESC;\n")),Object(n.b)("p",null,'When we execute these queries, the parser looks at line 1 sees firstly that it is a USE command it then asks what you want to use, and it finds the answer syntactically by looking at what is after the space next to the USER command. It sees that the word is "Northwind". Because it is a USE command, it knows that it must lookup it does a lookup database names in the data dictionary to see if a database with the name Northwind exists? If the answer is YES then it changes the database for this session to Northwind, if not execution stops, and the RDBMS generates an error.'),Object(n.b)("p",null,"From reading this paragraph, you will notice how amazing RDBMS's are. It sees only two words and then follows all the steps described above."),Object(n.b)("p",null,"Now for line 2 to 4. Next the parser looks at line 2, sees the SELECT. This tells the parser 2 things, (1) SELECT command means that it is going to display or produce data. But it does not have the full picture yet, (2) SELECT stamen means it must now look for a FROM clause. "),Object(n.b)("p",null,"But note that although it has seen the SELECT, when it looks for the FROM clause it has not yet nor means to evaluate the parts between the SELECT and the FROM yet. The reason for this is, remember that the FROM clause tells the parser what the table it must process. Columns are attributes or sub-objects of a table object. If it had to first evaluate the column names before the table name it would have to look through all the columns in all the tables to locate the columns stipulated in the query. Looking the FROM clause means that it can filter out all the columns for that table and only do a lookup in a much smaller list."),Object(n.b)("p",null,"Yet still it will now look for a WHERE clause, remember the WHERE clause stipulates the rows to be displayed. It is more efficient to first resolve a query horizontally meaning find rows first, before resolving it vertically meaning find columns. It finds no WHERE clause and since a WHERE clause is not mandatory it skips the WHERE operation, knowing that because a where is absent all the rows are going to be displayed. "),Object(n.b)("p",null,"Still it does not consider the column names between SELECT and FROM.  It is because the statement contains an ORDER BY clause, since you can SELECT only certain columns and are still able to sort the data for a COLUMN that will not be displayed. The parser must first resolve the sort order of the rows."),Object(n.b)("p",null,"Since it has resolved all the clauses, it will now look at the column names between SELECT and FROM and display to the user."),Object(n.b)("p",null,"Note for this example the SELECT query is written over multiple lines. Some queries are very complex and difficult to for humans to read all on 1 line. Splitting them up in different rows help us but for the query parser its all the same. Whether the query is on multiple lines or written in one line it has no bearing on the parser. This is because of how the query is structured, a SELECT statement cannot will always have a FROM clause after the select, the where clause will never be in front of the FROM. Unless you like errors a lot. Similarly, the ORDER BY clause will never be before the WHERE clause. Each of these clauses break the query up into chunks that must be syntactically appropriate for that chunk otherwise the query will fail."))}h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/pages/query-exec-methods.mdx"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-query-exec-methods-mdx-5a12d7f8940a5a00c628.js.map